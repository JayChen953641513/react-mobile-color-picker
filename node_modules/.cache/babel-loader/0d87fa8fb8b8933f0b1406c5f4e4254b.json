{"ast":null,"code":"export const rgbToString = str => {\n  let result = '';\n\n  if (str.indexOf(\"#\") === 0) {\n    result = str;\n  } else if (str.indexOf(\"rgb(\") === 0) {\n    const colors = str.replace(/rgb\\(/g, \"\").replace(/\\)/g, \"\").split(\",\");\n    const r = parseInt(colors[0]).toString(16).length === 1 ? \"0\" + parseInt(colors[0]).toString(16) : parseInt(colors[0]).toString(16);\n    const g = parseInt(colors[1]).toString(16).length === 1 ? \"0\" + parseInt(colors[1]).toString(16) : parseInt(colors[1]).toString(16);\n    const b = parseInt(colors[2]).toString(16).length === 1 ? \"0\" + parseInt(colors[2]).toString(16) : parseInt(colors[2]).toString(16);\n    result = `#${r}${g}${b}`;\n  }\n\n  return result;\n};\nexport const stringToRgb = (str, mode = \"string\") => {\n  const template = str.toLowerCase();\n  let result = '';\n\n  if (template.indexOf(\"rgb(\") === 0) {\n    result = template;\n  } else if (template.indexOf(\"rgba(\") === 0) {\n    const colors = template.replace(/rgba\\(/g, \"\").replace(/\\)/g, \"\").split(\",\");\n    const r = colors[0];\n    const g = colors[1];\n    const b = colors[2];\n    result = `rgb(${r},${g},${b})`;\n  } else if (template.indexOf(\"#\") === 0) {\n    let colors = template.replace(/#/g, \"\");\n    let resultArr = [];\n\n    if (colors.length === 3) {\n      colors = colors.replace(/[0-9a-f]/g, str => {\n        return str + str;\n      });\n    }\n\n    for (let i = 0; i < colors.length; i += 2) {\n      resultArr.push(parseInt(colors[i] + colors[i + 1], 16));\n    }\n\n    result = `rgb(${resultArr.join(\",\")})`;\n  }\n\n  if (mode === \"string\") {\n    return result;\n  } else if (mode === \"array\") {\n    return result.replace(/rgb\\(/g, \"\").replace(/\\)/g, \"\").split(\",\");\n  }\n};","map":{"version":3,"sources":["E:/work/openSoureProject/react-mobile-color-picker/src/utils/index.js"],"names":["rgbToString","str","result","indexOf","colors","replace","split","r","parseInt","toString","length","g","b","stringToRgb","mode","template","toLowerCase","resultArr","i","push","join"],"mappings":"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","sourcesContent":["export const rgbToString = (str) => {\r\n    let result = ''\r\n    if (str.indexOf(\"#\") === 0) {\r\n        result = str\r\n    } else if (str.indexOf(\"rgb(\") === 0) {\r\n        const colors = str.replace(/rgb\\(/g, \"\").replace(/\\)/g, \"\").split(\",\")\r\n        const r = parseInt(colors[0]).toString(16).length === 1 ? \"0\" + parseInt(colors[0]).toString(16) : parseInt(colors[0]).toString(16)\r\n        const g = parseInt(colors[1]).toString(16).length === 1 ? \"0\" + parseInt(colors[1]).toString(16) : parseInt(colors[1]).toString(16)\r\n        const b = parseInt(colors[2]).toString(16).length === 1 ? \"0\" + parseInt(colors[2]).toString(16) : parseInt(colors[2]).toString(16)\r\n        result = `#${r}${g}${b}`\r\n    }\r\n    return result\r\n}\r\nexport const stringToRgb = (str, mode = \"string\") => {\r\n    const template = str.toLowerCase()\r\n    let result = ''\r\n    if (template.indexOf(\"rgb(\") === 0) {\r\n        result = template\r\n    } else if (template.indexOf(\"rgba(\") === 0) {\r\n        const colors = template.replace(/rgba\\(/g, \"\").replace(/\\)/g, \"\").split(\",\")\r\n        const r = colors[0]\r\n        const g = colors[1]\r\n        const b = colors[2]\r\n        result = `rgb(${r},${g},${b})`\r\n    } else if (template.indexOf(\"#\") === 0) {\r\n        let colors = template.replace(/#/g, \"\")\r\n        let resultArr = []\r\n        if (colors.length === 3) {\r\n            colors = colors.replace(/[0-9a-f]/g, (str) => {\r\n                return str + str\r\n            })\r\n        }\r\n        for (let i = 0; i < colors.length; i += 2) {\r\n            resultArr.push(parseInt(colors[i] + colors[i + 1], 16))\r\n        }\r\n        result = `rgb(${resultArr.join(\",\")})`\r\n    }\r\n    if (mode === \"string\") {\r\n        return result\r\n    } else if (mode === \"array\") {\r\n        return result.replace(/rgb\\(/g, \"\").replace(/\\)/g, \"\").split(\",\")\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}